// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: xflops.cn/flame/protos/flame.proto

package grpcs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionState int32

const (
	SessionState_Open   SessionState = 0
	SessionState_Closed SessionState = 1
)

// Enum value maps for SessionState.
var (
	SessionState_name = map[int32]string{
		0: "Open",
		1: "Closed",
	}
	SessionState_value = map[string]int32{
		"Open":   0,
		"Closed": 1,
	}
)

func (x SessionState) Enum() *SessionState {
	p := new(SessionState)
	*p = x
	return p
}

func (x SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_xflops_cn_flame_protos_flame_proto_enumTypes[0].Descriptor()
}

func (SessionState) Type() protoreflect.EnumType {
	return &file_xflops_cn_flame_protos_flame_proto_enumTypes[0]
}

func (x SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionState.Descriptor instead.
func (SessionState) EnumDescriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{0}
}

type TaskState int32

const (
	TaskState_Pending TaskState = 0
	TaskState_Running TaskState = 1
	TaskState_Succeed TaskState = 2
	TaskState_Failed  TaskState = 3
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "Pending",
		1: "Running",
		2: "Succeed",
		3: "Failed",
	}
	TaskState_value = map[string]int32{
		"Pending": 0,
		"Running": 1,
		"Succeed": 2,
		"Failed":  3,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_xflops_cn_flame_protos_flame_proto_enumTypes[1].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_xflops_cn_flame_protos_flame_proto_enumTypes[1]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{1}
}

type ExecutorState int32

const (
	ExecutorState_idle  ExecutorState = 0
	ExecutorState_bound ExecutorState = 1
)

// Enum value maps for ExecutorState.
var (
	ExecutorState_name = map[int32]string{
		0: "idle",
		1: "bound",
	}
	ExecutorState_value = map[string]int32{
		"idle":  0,
		"bound": 1,
	}
)

func (x ExecutorState) Enum() *ExecutorState {
	p := new(ExecutorState)
	*p = x
	return p
}

func (x ExecutorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutorState) Descriptor() protoreflect.EnumDescriptor {
	return file_xflops_cn_flame_protos_flame_proto_enumTypes[2].Descriptor()
}

func (ExecutorState) Type() protoreflect.EnumType {
	return &file_xflops_cn_flame_protos_flame_proto_enumTypes[2]
}

func (x ExecutorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutorState.Descriptor instead.
func (ExecutorState) EnumDescriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{2}
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	OwnerRef string `protobuf:"bytes,2,opt,name=ownerRef,proto3" json:"ownerRef,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Metadata) GetOwnerRef() string {
	if x != nil {
		return x.OwnerRef
	}
	return ""
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{1}
}

func (x *Client) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{2}
}

func (x *Connection) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   SessionState `protobuf:"varint,1,opt,name=state,proto3,enum=SessionState" json:"state,omitempty"`
	Pending int32        `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	Running int32        `protobuf:"varint,3,opt,name=running,proto3" json:"running,omitempty"`
	Succeed int32        `protobuf:"varint,4,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Failed  int32        `protobuf:"varint,5,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *SessionStatus) Reset() {
	*x = SessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStatus) ProtoMessage() {}

func (x *SessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStatus.ProtoReflect.Descriptor instead.
func (*SessionStatus) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{3}
}

func (x *SessionStatus) GetState() SessionState {
	if x != nil {
		return x.State
	}
	return SessionState_Open
}

func (x *SessionStatus) GetPending() int32 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *SessionStatus) GetRunning() int32 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *SessionStatus) GetSucceed() int32 {
	if x != nil {
		return x.Succeed
	}
	return 0
}

func (x *SessionStatus) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type SessionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType string `protobuf:"bytes,1,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	Recoverable bool   `protobuf:"varint,2,opt,name=recoverable,proto3" json:"recoverable,omitempty"`
	Slots       int32  `protobuf:"varint,3,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (x *SessionSpec) Reset() {
	*x = SessionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSpec) ProtoMessage() {}

func (x *SessionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSpec.ProtoReflect.Descriptor instead.
func (*SessionSpec) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{4}
}

func (x *SessionSpec) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *SessionSpec) GetRecoverable() bool {
	if x != nil {
		return x.Recoverable
	}
	return false
}

func (x *SessionSpec) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata      `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *SessionSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *SessionStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{5}
}

func (x *Session) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Session) GetSpec() *SessionSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Session) GetStatus() *SessionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State TaskState `protobuf:"varint,1,opt,name=state,proto3,enum=TaskState" json:"state,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{6}
}

func (x *TaskStatus) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_Pending
}

type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{7}
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *TaskSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *TaskStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{8}
}

func (x *Task) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Task) GetSpec() *TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Task) GetStatus() *TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type TaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Input     string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *TaskInput) Reset() {
	*x = TaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInput) ProtoMessage() {}

func (x *TaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInput.ProtoReflect.Descriptor instead.
func (*TaskInput) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{9}
}

func (x *TaskInput) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskInput) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *TaskInput) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type TaskOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	SessionID  string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	ExecutorID string `protobuf:"bytes,3,opt,name=executorID,proto3" json:"executorID,omitempty"`
	Output     string `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *TaskOutput) Reset() {
	*x = TaskOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOutput) ProtoMessage() {}

func (x *TaskOutput) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOutput.ProtoReflect.Descriptor instead.
func (*TaskOutput) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{10}
}

func (x *TaskOutput) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskOutput) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *TaskOutput) GetExecutorID() string {
	if x != nil {
		return x.ExecutorID
	}
	return ""
}

func (x *TaskOutput) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type ExecutorSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Slots int32  `protobuf:"varint,2,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (x *ExecutorSpec) Reset() {
	*x = ExecutorSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorSpec) ProtoMessage() {}

func (x *ExecutorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorSpec.ProtoReflect.Descriptor instead.
func (*ExecutorSpec) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{11}
}

func (x *ExecutorSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ExecutorSpec) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

type ExecutorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State ExecutorState `protobuf:"varint,1,opt,name=state,proto3,enum=ExecutorState" json:"state,omitempty"`
}

func (x *ExecutorStatus) Reset() {
	*x = ExecutorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorStatus) ProtoMessage() {}

func (x *ExecutorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorStatus.ProtoReflect.Descriptor instead.
func (*ExecutorStatus) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{12}
}

func (x *ExecutorStatus) GetState() ExecutorState {
	if x != nil {
		return x.State
	}
	return ExecutorState_idle
}

type Executor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *ExecutorSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *ExecutorStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Executor) Reset() {
	*x = Executor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Executor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executor) ProtoMessage() {}

func (x *Executor) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executor.ProtoReflect.Descriptor instead.
func (*Executor) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{13}
}

func (x *Executor) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Executor) GetSpec() *ExecutorSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Executor) GetStatus() *ExecutorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{14}
}

func (x *Result) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SessionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *SessionList) Reset() {
	*x = SessionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionList) ProtoMessage() {}

func (x *SessionList) ProtoReflect() protoreflect.Message {
	mi := &file_xflops_cn_flame_protos_flame_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionList.ProtoReflect.Descriptor instead.
func (*SessionList) Descriptor() ([]byte, []int) {
	return file_xflops_cn_flame_protos_flame_proto_rawDescGZIP(), []int{15}
}

func (x *SessionList) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

var File_xflops_cn_flame_protos_flame_proto protoreflect.FileDescriptor

var file_xflops_cn_flame_protos_flame_proto_rawDesc = []byte{
	0x0a, 0x22, 0x78, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6e, 0x2f, 0x66, 0x6c, 0x61, 0x6d,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2f, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x22, 0x71, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x7a, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x38, 0x0a, 0x0c,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7d,
	0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x0b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2a, 0x24, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x32, 0xbe, 0x02, 0x0a,
	0x08, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x1a, 0x0b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x25, 0x0a,
	0x0a, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x20, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x0a,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x05, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x76, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x05, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x0b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x0a,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0xde, 0x01,
	0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x1a, 0x09, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x22, 0x0a,
	0x0a, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x1d, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x1a, 0x08, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x1e, 0x0a, 0x06, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x24, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x09, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a, 0x0a, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x0b,
	0x5a, 0x09, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_xflops_cn_flame_protos_flame_proto_rawDescOnce sync.Once
	file_xflops_cn_flame_protos_flame_proto_rawDescData = file_xflops_cn_flame_protos_flame_proto_rawDesc
)

func file_xflops_cn_flame_protos_flame_proto_rawDescGZIP() []byte {
	file_xflops_cn_flame_protos_flame_proto_rawDescOnce.Do(func() {
		file_xflops_cn_flame_protos_flame_proto_rawDescData = protoimpl.X.CompressGZIP(file_xflops_cn_flame_protos_flame_proto_rawDescData)
	})
	return file_xflops_cn_flame_protos_flame_proto_rawDescData
}

var file_xflops_cn_flame_protos_flame_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_xflops_cn_flame_protos_flame_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_xflops_cn_flame_protos_flame_proto_goTypes = []interface{}{
	(SessionState)(0),      // 0: SessionState
	(TaskState)(0),         // 1: TaskState
	(ExecutorState)(0),     // 2: ExecutorState
	(*Metadata)(nil),       // 3: Metadata
	(*Client)(nil),         // 4: Client
	(*Connection)(nil),     // 5: Connection
	(*SessionStatus)(nil),  // 6: SessionStatus
	(*SessionSpec)(nil),    // 7: SessionSpec
	(*Session)(nil),        // 8: Session
	(*TaskStatus)(nil),     // 9: TaskStatus
	(*TaskSpec)(nil),       // 10: TaskSpec
	(*Task)(nil),           // 11: Task
	(*TaskInput)(nil),      // 12: TaskInput
	(*TaskOutput)(nil),     // 13: TaskOutput
	(*ExecutorSpec)(nil),   // 14: ExecutorSpec
	(*ExecutorStatus)(nil), // 15: ExecutorStatus
	(*Executor)(nil),       // 16: Executor
	(*Result)(nil),         // 17: Result
	(*SessionList)(nil),    // 18: SessionList
}
var file_xflops_cn_flame_protos_flame_proto_depIdxs = []int32{
	3,  // 0: Client.metadata:type_name -> Metadata
	3,  // 1: Connection.metadata:type_name -> Metadata
	0,  // 2: SessionStatus.state:type_name -> SessionState
	3,  // 3: Session.metadata:type_name -> Metadata
	7,  // 4: Session.spec:type_name -> SessionSpec
	6,  // 5: Session.status:type_name -> SessionStatus
	1,  // 6: TaskStatus.state:type_name -> TaskState
	3,  // 7: Task.metadata:type_name -> Metadata
	10, // 8: Task.spec:type_name -> TaskSpec
	9,  // 9: Task.status:type_name -> TaskStatus
	2,  // 10: ExecutorStatus.state:type_name -> ExecutorState
	3,  // 11: Executor.metadata:type_name -> Metadata
	14, // 12: Executor.spec:type_name -> ExecutorSpec
	15, // 13: Executor.status:type_name -> ExecutorStatus
	8,  // 14: SessionList.sessions:type_name -> Session
	4,  // 15: Frontend.NewConnection:input_type -> Client
	5,  // 16: Frontend.CloseConnection:input_type -> Connection
	5,  // 17: Frontend.NewSession:input_type -> Connection
	8,  // 18: Frontend.CloseSession:input_type -> Session
	4,  // 19: Frontend.ListSession:input_type -> Client
	12, // 20: Frontend.SendInput:input_type -> TaskInput
	11, // 21: Frontend.RecvOutput:input_type -> Task
	12, // 22: Frontend.Run:input_type -> TaskInput
	16, // 23: Backend.Register:input_type -> Executor
	16, // 24: Backend.Unregister:input_type -> Executor
	16, // 25: Backend.Bind:input_type -> Executor
	16, // 26: Backend.Unbind:input_type -> Executor
	16, // 27: Backend.GetTask:input_type -> Executor
	13, // 28: Backend.CompleteTask:input_type -> TaskOutput
	5,  // 29: Frontend.NewConnection:output_type -> Connection
	17, // 30: Frontend.CloseConnection:output_type -> Result
	8,  // 31: Frontend.NewSession:output_type -> Session
	17, // 32: Frontend.CloseSession:output_type -> Result
	18, // 33: Frontend.ListSession:output_type -> SessionList
	11, // 34: Frontend.SendInput:output_type -> Task
	13, // 35: Frontend.RecvOutput:output_type -> TaskOutput
	13, // 36: Frontend.Run:output_type -> TaskOutput
	16, // 37: Backend.Register:output_type -> Executor
	17, // 38: Backend.Unregister:output_type -> Result
	8,  // 39: Backend.Bind:output_type -> Session
	17, // 40: Backend.Unbind:output_type -> Result
	12, // 41: Backend.GetTask:output_type -> TaskInput
	17, // 42: Backend.CompleteTask:output_type -> Result
	29, // [29:43] is the sub-list for method output_type
	15, // [15:29] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_xflops_cn_flame_protos_flame_proto_init() }
func file_xflops_cn_flame_protos_flame_proto_init() {
	if File_xflops_cn_flame_protos_flame_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xflops_cn_flame_protos_flame_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Executor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xflops_cn_flame_protos_flame_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xflops_cn_flame_protos_flame_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_xflops_cn_flame_protos_flame_proto_goTypes,
		DependencyIndexes: file_xflops_cn_flame_protos_flame_proto_depIdxs,
		EnumInfos:         file_xflops_cn_flame_protos_flame_proto_enumTypes,
		MessageInfos:      file_xflops_cn_flame_protos_flame_proto_msgTypes,
	}.Build()
	File_xflops_cn_flame_protos_flame_proto = out.File
	file_xflops_cn_flame_protos_flame_proto_rawDesc = nil
	file_xflops_cn_flame_protos_flame_proto_goTypes = nil
	file_xflops_cn_flame_protos_flame_proto_depIdxs = nil
}
