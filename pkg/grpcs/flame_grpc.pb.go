// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: xflops.cn/flame/protos/flame.proto

package grpcs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontendClient is the client API for Frontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendClient interface {
	NewConnection(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Connection, error)
	CloseConnection(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Result, error)
	NewSession(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Session, error)
	CloseSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error)
	ListSession(ctx context.Context, in *Client, opts ...grpc.CallOption) (*SessionList, error)
	SendInput(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*Task, error)
	RecvOutput(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskOutput, error)
	Run(ctx context.Context, opts ...grpc.CallOption) (Frontend_RunClient, error)
}

type frontendClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendClient(cc grpc.ClientConnInterface) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) NewConnection(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/Frontend/NewConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CloseConnection(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Frontend/CloseConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) NewSession(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/Frontend/NewSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) CloseSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Frontend/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) ListSession(ctx context.Context, in *Client, opts ...grpc.CallOption) (*SessionList, error) {
	out := new(SessionList)
	err := c.cc.Invoke(ctx, "/Frontend/ListSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) SendInput(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/Frontend/SendInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) RecvOutput(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskOutput, error) {
	out := new(TaskOutput)
	err := c.cc.Invoke(ctx, "/Frontend/RecvOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) Run(ctx context.Context, opts ...grpc.CallOption) (Frontend_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Frontend_ServiceDesc.Streams[0], "/Frontend/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendRunClient{stream}
	return x, nil
}

type Frontend_RunClient interface {
	Send(*TaskInput) error
	Recv() (*TaskOutput, error)
	grpc.ClientStream
}

type frontendRunClient struct {
	grpc.ClientStream
}

func (x *frontendRunClient) Send(m *TaskInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendRunClient) Recv() (*TaskOutput, error) {
	m := new(TaskOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrontendServer is the server API for Frontend service.
// All implementations must embed UnimplementedFrontendServer
// for forward compatibility
type FrontendServer interface {
	NewConnection(context.Context, *Client) (*Connection, error)
	CloseConnection(context.Context, *Connection) (*Result, error)
	NewSession(context.Context, *Connection) (*Session, error)
	CloseSession(context.Context, *Session) (*Result, error)
	ListSession(context.Context, *Client) (*SessionList, error)
	SendInput(context.Context, *TaskInput) (*Task, error)
	RecvOutput(context.Context, *Task) (*TaskOutput, error)
	Run(Frontend_RunServer) error
	mustEmbedUnimplementedFrontendServer()
}

// UnimplementedFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendServer struct {
}

func (UnimplementedFrontendServer) NewConnection(context.Context, *Client) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewConnection not implemented")
}
func (UnimplementedFrontendServer) CloseConnection(context.Context, *Connection) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConnection not implemented")
}
func (UnimplementedFrontendServer) NewSession(context.Context, *Connection) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (UnimplementedFrontendServer) CloseSession(context.Context, *Session) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedFrontendServer) ListSession(context.Context, *Client) (*SessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSession not implemented")
}
func (UnimplementedFrontendServer) SendInput(context.Context, *TaskInput) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInput not implemented")
}
func (UnimplementedFrontendServer) RecvOutput(context.Context, *Task) (*TaskOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvOutput not implemented")
}
func (UnimplementedFrontendServer) Run(Frontend_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedFrontendServer) mustEmbedUnimplementedFrontendServer() {}

// UnsafeFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendServer will
// result in compilation errors.
type UnsafeFrontendServer interface {
	mustEmbedUnimplementedFrontendServer()
}

func RegisterFrontendServer(s grpc.ServiceRegistrar, srv FrontendServer) {
	s.RegisterService(&Frontend_ServiceDesc, srv)
}

func _Frontend_NewConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).NewConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/NewConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).NewConnection(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CloseConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CloseConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/CloseConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CloseConnection(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/NewSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).NewSession(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CloseSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_ListSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ListSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/ListSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ListSession(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_SendInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).SendInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/SendInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).SendInput(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_RecvOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).RecvOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/RecvOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).RecvOutput(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendServer).Run(&frontendRunServer{stream})
}

type Frontend_RunServer interface {
	Send(*TaskOutput) error
	Recv() (*TaskInput, error)
	grpc.ServerStream
}

type frontendRunServer struct {
	grpc.ServerStream
}

func (x *frontendRunServer) Send(m *TaskOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendRunServer) Recv() (*TaskInput, error) {
	m := new(TaskInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Frontend_ServiceDesc is the grpc.ServiceDesc for Frontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Frontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewConnection",
			Handler:    _Frontend_NewConnection_Handler,
		},
		{
			MethodName: "CloseConnection",
			Handler:    _Frontend_CloseConnection_Handler,
		},
		{
			MethodName: "NewSession",
			Handler:    _Frontend_NewSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _Frontend_CloseSession_Handler,
		},
		{
			MethodName: "ListSession",
			Handler:    _Frontend_ListSession_Handler,
		},
		{
			MethodName: "SendInput",
			Handler:    _Frontend_SendInput_Handler,
		},
		{
			MethodName: "RecvOutput",
			Handler:    _Frontend_RecvOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Frontend_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "xflops.cn/flame/protos/flame.proto",
}

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	Register(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Executor, error)
	Unregister(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Result, error)
	Bind(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Session, error)
	Unbind(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Result, error)
	GetTask(ctx context.Context, in *Executor, opts ...grpc.CallOption) (Backend_GetTaskClient, error)
	CompleteTask(ctx context.Context, in *TaskOutput, opts ...grpc.CallOption) (*Result, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Register(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Executor, error) {
	out := new(Executor)
	err := c.cc.Invoke(ctx, "/Backend/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Unregister(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Backend/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Bind(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/Backend/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Unbind(ctx context.Context, in *Executor, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Backend/Unbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetTask(ctx context.Context, in *Executor, opts ...grpc.CallOption) (Backend_GetTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backend_ServiceDesc.Streams[0], "/Backend/GetTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendGetTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_GetTaskClient interface {
	Recv() (*TaskInput, error)
	grpc.ClientStream
}

type backendGetTaskClient struct {
	grpc.ClientStream
}

func (x *backendGetTaskClient) Recv() (*TaskInput, error) {
	m := new(TaskInput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendClient) CompleteTask(ctx context.Context, in *TaskOutput, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Backend/CompleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations must embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	Register(context.Context, *Executor) (*Executor, error)
	Unregister(context.Context, *Executor) (*Result, error)
	Bind(context.Context, *Executor) (*Session, error)
	Unbind(context.Context, *Executor) (*Result, error)
	GetTask(*Executor, Backend_GetTaskServer) error
	CompleteTask(context.Context, *TaskOutput) (*Result, error)
	mustEmbedUnimplementedBackendServer()
}

// UnimplementedBackendServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) Register(context.Context, *Executor) (*Executor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBackendServer) Unregister(context.Context, *Executor) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedBackendServer) Bind(context.Context, *Executor) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedBackendServer) Unbind(context.Context, *Executor) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (UnimplementedBackendServer) GetTask(*Executor, Backend_GetTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedBackendServer) CompleteTask(context.Context, *TaskOutput) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedBackendServer) mustEmbedUnimplementedBackendServer() {}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Executor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Register(ctx, req.(*Executor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Executor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Unregister(ctx, req.(*Executor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Executor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Bind(ctx, req.(*Executor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Executor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Unbind(ctx, req.(*Executor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Executor)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).GetTask(m, &backendGetTaskServer{stream})
}

type Backend_GetTaskServer interface {
	Send(*TaskInput) error
	grpc.ServerStream
}

type backendGetTaskServer struct {
	grpc.ServerStream
}

func (x *backendGetTaskServer) Send(m *TaskInput) error {
	return x.ServerStream.SendMsg(m)
}

func _Backend_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Backend/CompleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CompleteTask(ctx, req.(*TaskOutput))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Backend_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Backend_Unregister_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _Backend_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _Backend_Unbind_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _Backend_CompleteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTask",
			Handler:       _Backend_GetTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "xflops.cn/flame/protos/flame.proto",
}
